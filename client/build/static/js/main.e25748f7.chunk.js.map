{"version":3,"sources":["Components/MuteButton.js","App.js","reportWebVitals.js","index.js"],"names":["library","add","faMicrophone","faMicrophoneSlash","faVideoSlash","faVideo","socket","io","transports","App","useState","me","setMe","stream","setStream","receivingCall","setReceivingCall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","name","setName","mic","setMic","vid","setVid","myVideo","useRef","userVideo","connectionRef","useEffect","alanBtn","key","onCommand","commandData","command","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","on","id","data","from","signal","style","textAlign","color","fontSize","className","playsInline","muted","ref","autoPlay","width","onClick","enabled","getAudioTracks","console","log","icon","size","getVideoTracks","TextField","label","variant","value","onChange","e","target","marginBottom","text","Button","startIcon","destroy","IconButton","peer","Peer","initiator","trickle","emit","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e25748f7.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core'\r\nimport { faMicrophone } from '@fortawesome/free-solid-svg-icons'\r\nimport { faMicrophoneSlash,faVideo, faVideoSlash } from '@fortawesome/free-solid-svg-icons'\r\n\r\n//inserting microphone , video icons\r\nlibrary.add(faMicrophone, faMicrophoneSlash, faVideoSlash, faVideo)\r\n","import Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport TextField from \"@material-ui/core/TextField\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport PhoneIcon from \"@material-ui/icons/Phone\"\nimport React, { useEffect, useRef, useState} from \"react\"\nimport \"./Components/MuteButton\"\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\nimport Peer from \"simple-peer\"\nimport io from \"socket.io-client\"\nimport \"./App.css\"\nimport alanBtn from \"@alan-ai/alan-sdk-web\";\nlet socket = io('https://server-letslink.herokuapp.com/',{transports: ['websocket', 'polling', 'flashsocket']})\n\n\nfunction App() {\n    const [ me, setMe ] = useState(\"\")\n    const [ stream, setStream ] = useState()\n    const [ receivingCall, setReceivingCall ] = useState(false)\n    const [ caller, setCaller ] = useState(\"\")\n    const [ callerSignal, setCallerSignal ] = useState()\n    const [ callAccepted, setCallAccepted ] = useState(false)\n    const [ idToCall, setIdToCall ] = useState(\"\")\n    const [ callEnded, setCallEnded] = useState(false)\n    const [ name, setName ] = useState(\"\")\n    const [mic, setMic]= useState(true)\n    const [vid, setVid]= useState(true)\n    const myVideo = useRef()\n    const userVideo = useRef()\n    const connectionRef= useRef()\n    \n    \n    useEffect(() => {\n        alanBtn({\n            key: '1ba6e8977436a17368d366d5a6fa9f702e956eca572e1d8b807a3e2338fdd0dc/stage',\n            onCommand: (commandData) => {\n                if (commandData.command === 'go:back') {\n                        // Call the client code that will react to the received command\n                    }\n                }\n        });\n    }, []);\n\n    useEffect(() => {\n        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then((stream) => {\n            setStream(stream)\n                myVideo.current.srcObject = stream\n        })\n    \n    socket.on(\"me\", (id) => {\n            setMe(id)\n        })\n \n        socket.on(\"callUser\", (data) => {\n            setReceivingCall(true)\n            setCaller(data.from)\n            setName(data.name)\n            setCallerSignal(data.signal)\n        })\n    }, [])\n \n    const callUser = (id) => {\n        const peer = new Peer({\n            initiator: true,\n            trickle: false,\n            stream: stream\n        })\n        peer.on(\"signal\", (data) => {\n            socket.emit(\"callUser\", {\n                userToCall: id,\n                signalData: data,\n                from: me,\n                name: name\n            })\n        })\n        peer.on(\"stream\", (stream) => {\n            \n                userVideo.current.srcObject = stream\n            \n        })\n        socket.on(\"callAccepted\", (signal) => {\n            setCallAccepted(true)\n            peer.signal(signal)\n        })\n \n        connectionRef.current = peer\n    }\n \n    const answerCall =() =>  {\n        setCallAccepted(true)\n        const peer = new Peer({\n            initiator: false,\n            trickle: false,\n            stream: stream\n        })\n        peer.on(\"signal\", (data) => {\n            socket.emit(\"answerCall\", { signal: data, to: caller })\n        })\n        peer.on(\"stream\", (stream) => {\n            userVideo.current.srcObject = stream\n        })\n \n        peer.signal(callerSignal)\n        connectionRef.current = peer\n    }\n \n    const leaveCall = () => {\n        setCallEnded(true)\n        connectionRef.current.destroy()\n    }\n    const handleMic =()=>{\n        setMic(!mic);\n        const enabled=stream.getAudioTracks()[0].enabled;\n        if(enabled)\n        stream.getAudioTracks()[0].enabled=false;\n        else \n        stream.getAudioTracks()[0].enabled= true;\n        console.log(stream.getAudioTracks()[0]);\n      }\n      const handleVideo =()=>{\n        setVid(!vid);\n        const enabled=stream.getVideoTracks()[0].enabled;\n        if(enabled)\n        stream.getVideoTracks()[0].enabled=false;\n        else \n        stream.getVideoTracks()[0].enabled= true;\n        console.log(stream.getVideoTracks()[0]);\n      }\n    return (\n        <>\n            <h1 style={{ textAlign: \"center\", color: '#865858', fontSize:'3rem' }}>Let's Link</h1>\n        <div className=\"container\" >\n            <div className=\"video-container\">\n                <div className=\"video\">\n                    {stream &&  <video playsInline muted ref={myVideo} autoPlay style={{ width: \"300px\" }} />}\n                    <div className=\"menu\">\n                        <div className=\"menu-icon\" onClick={handleMic}>\n                            <FontAwesomeIcon  icon={mic ? \"microphone\" :  \"microphone-slash\" } size=\"2x\"/>\n                        </div> \n                        <div className=\"menu-icon\" onClick={handleVideo}>\n                            <FontAwesomeIcon  icon={vid ? \"video\" :  \"video-slash\" } size=\"2x\"/>\n                        </div>\n                    </div>\n                </div>\n                <div className=\"video\" >\n                    {callAccepted && !callEnded ?\n                    <video playsInline ref={userVideo} autoPlay style={{ width: \"300px\"}} />:\n                    null}\n                </div>\n            </div>\n            <div className=\"myId\">\n                <TextField\n                    id=\"filled-basic\"\n                    label=\"Name\"\n                    variant=\"outlined\"\n                    value={name}\n                    onChange={(e) => setName(e.target.value)}\n                    style={{ marginBottom: \"20px\" }}\n                />\n                <CopyToClipboard text={me} style={{ marginBottom: \"2rem\" }}>\n                    <Button variant=\"contained\" color=\"inherit\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\n                        Copy ID\n                    </Button>\n                </CopyToClipboard>\n \n                <TextField\n                    id=\"filled-basic\"\n                    label=\"ID to call\"\n                    variant=\"outlined\"\n                    value={idToCall}\n                    onChange={(e) => setIdToCall(e.target.value)}\n                />\n                <div className=\"call-button\">\n                    {callAccepted && !callEnded ? (\n                        <Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\n                            End Call\n                        </Button>\n                    ) : (\n                        <IconButton color=\"inherit\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\n                            Call<PhoneIcon fontSize=\"large\" />\n                        </IconButton>\n                    )}\n                    {idToCall}\n                </div>\n            </div>\n            <div>\n                {receivingCall && !callAccepted ? (\n                        <div className=\"caller\">\n                        <h1 style={{color:'#865858'}}>Accept the call</h1>\n                        <Button variant=\"contained\" color=\"inherit\" onClick={answerCall}>\n                            Answer\n                        </Button>\n                    </div>\n                ) : null}\n            </div>\n        </div>\n        </>\n    )\n}\n \nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}